AWSTemplateFormatVersion: '2010-09-09'
Description: 'IPCR Early Warning & Early Response System - AWS Deployment'

Parameters:
  EnvironmentName:
    Description: Environment name to deploy to (e.g. dev, prod)
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod

  InstanceType:
    Description: EC2 instance type to deploy the application
    Type: String
    Default: t2.medium
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.medium
      - t3.large

  DBInstanceClass:
    Description: RDS instance class for PostgreSQL database
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.r5.large

  DBStorage:
    Description: PostgreSQL storage size in GB
    Type: Number
    Default: 20
    MinValue: 20
    MaxValue: 1000

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PrivateSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PrivateRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # Best practice would be to restrict to specific IPs
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-AppSG

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for PostgreSQL database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-DBSG

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for IPCR database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-DBSubnetGroup

  PostgreSQLDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: ipcr
      Engine: postgres
      EngineVersion: '13.4'
      MasterUsername: dbadmin
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${EnvironmentName}-IPCR-DB-Credentials:SecretString:password}}'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBStorage
      StorageType: gp2
      MultiAZ: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-PostgreSQL

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-ALB

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-TG

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      LaunchConfigurationName: !Ref AppLaunchConfiguration
      MinSize: 2
      MaxSize: 6
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref AppTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IPCR-ASG
          PropagateAtLaunch: true

  AppLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0c55b159cbfafe1f0  # Amazon Linux 2 AMI (adjust for your region)
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref AppSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y
          yum install -y docker git
          service docker start
          usermod -a -G docker ec2-user
          
          # Install Node.js
          curl -sL https://rpm.nodesource.com/setup_16.x | bash -
          yum install -y nodejs
          
          # Install PM2 for process management
          npm install pm2 -g
          
          # Clone the application repository
          mkdir -p /app
          cd /app
          git clone https://github.com/ipcr/ewers-app.git .
          
          # Set environment variables
          cat > /app/.env << EOL
          NODE_ENV=production
          PORT=5000
          DATABASE_URL=postgresql://dbadmin:{{resolve:secretsmanager:${EnvironmentName}-IPCR-DB-Credentials:SecretString:password}}@${PostgreSQLDB.Endpoint.Address}:${PostgreSQLDB.Endpoint.Port}/ipcr
          EOL
          
          # Install dependencies and build the application
          cd /app
          npm ci
          npm run build
          
          # Start the application with PM2
          pm2 start npm --name "ipcr-app" -- start
          pm2 startup
          pm2 save
          
          # Configure health check endpoint
          echo '
          const express = require("express");
          const app = express();
          app.get("/api/health", (req, res) => {
            res.status(200).send("OK");
          });
          app.listen(8081);
          ' > /app/healthcheck.js
          
          node /app/healthcheck.js &

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the application load balancer
    Value: !GetAtt AppLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-IPCR-ALBDNS

  DatabaseEndpoint:
    Description: Endpoint of the PostgreSQL database
    Value: !GetAtt PostgreSQLDB.Endpoint.Address
    Export:
      Name: !Sub ${EnvironmentName}-IPCR-DBEndpoint

  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC
    Export:
      Name: !Sub ${EnvironmentName}-IPCR-VPCID