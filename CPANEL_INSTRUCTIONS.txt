# cPanel Deployment Process Explained

## 1. Preparation (Already Completed)

We've already prepared your application for cPanel deployment by:
- Building the application with `npm run build`
- Creating a deployment package in the `cpanel-deploy` directory
- Modifying configuration files for cPanel compatibility
- Creating startup scripts for cPanel environment

## 2. Uploading to cPanel

### Method 1: Using File Manager
1. Log in to your cPanel account
2. Open "File Manager"
3. Navigate to the directory where you want to deploy (e.g., `public_html` or a subdirectory)
4. Click "Upload" and select all files from the `cpanel-deploy` directory
5. Wait for the upload to complete

### Method 2: Using FTP/SFTP (Recommended for Large Files)
1. Use an FTP client like FileZilla or Cyberduck
2. Connect to your cPanel hosting with the FTP credentials
3. Upload the entire `cpanel-deploy` directory content to your chosen directory on the server

## 3. Database Setup

1. In cPanel, navigate to "MySQL Databases" or "PostgreSQL Databases"
2. Create a new database (e.g., `ipcr_db`)
3. Create a new database user with a strong password
4. Add the user to the database with all privileges
5. Note the database connection details:
   - Hostname (usually localhost)
   - Database name
   - Username
   - Password
   - Port (usually 3306 for MySQL or 5432 for PostgreSQL)

## 4. Environment Configuration

1. In cPanel File Manager, navigate to your deployed application
2. Edit the `.env` file with your actual database credentials:
   ```
   DATABASE_URL=postgresql://your_db_user:your_password@localhost:5432/your_db_name
   ```
3. If you're using social media integrations, add your API keys for each service

## 5. Installing Dependencies

1. Access your server via SSH (if available):
   ```bash
   ssh username@yourdomain.com
   ```
2. Navigate to your application directory:
   ```bash
   cd public_html/your-app-directory
   ```
3. Install production dependencies:
   ```bash
   npm ci --omit=dev
   ```

If SSH is not available, most cPanel hosts provide a "Node.js" section where you can run commands.

## 6. Setting Up the Application

### Using cPanel's Application Manager
1. In cPanel, look for "Setup Node.js App" or similar
2. Click "Create Application"
3. Fill in the required fields:
   - Node.js version: 16.x or newer
   - Application mode: Production
   - Application root: Path to your application
   - Application URL: Your domain or subdomain
   - Application startup file: `start.cjs`
4. Click "Create" to set up the application

If cPanel doesn't have Node.js app management:
1. Set up a "Custom PHP Application" (some cPanel versions have this)
2. Create a PHP file that executes the Node.js application
3. Configure it to start when the server boots

## 7. Running Database Migrations

1. Edit `run-migration.cjs` and change the `SECURITY_TOKEN` to a strong random string
2. Run the migration file using one of these methods:
   - Via SSH: `node run-migration.cjs`
   - Via cPanel Terminal: Navigate to your app directory and run `node run-migration.cjs`
3. Access the migration endpoint: `http://yourdomain.com:8080/?token=your_security_token`
4. After migrations complete, **DELETE `run-migration.cjs`** for security

## 8. Setting Up a Custom Domain (Optional)

If you want to use a custom domain or subdomain:
1. In cPanel, go to "Domains" or "Subdomains"
2. Add your domain/subdomain and point it to your application directory
3. Configure DNS settings if using a new domain

## 9. SSL Certificate (Recommended)

1. In cPanel, find "SSL/TLS" or "Let's Encrypt"
2. Generate and install a free SSL certificate for your domain
3. Enable HTTPS for secure connections

## 10. Monitoring and Maintenance

1. Set up cron jobs for regular backups:
   - In cPanel, go to "Cron Jobs"
   - Create a schedule for database backups
2. Monitor application logs:
   - Check Node.js logs in your application directory
   - Set up log rotation if your cPanel hosting supports it

## Troubleshooting Common Issues

### Application Not Starting
- Check application logs for errors
- Verify Node.js version compatibility
- Ensure all dependencies are installed
- Check file permissions (should be 755 for directories, 644 for files)

### Database Connection Issues
- Verify database credentials in .env file
- Check if database server is accessible
- Some hosts require specific configuration for database access

### Port Already in Use
- Change the port in your application if 5000 is already in use
- Update .env file with the new port

### Memory Limitations
- cPanel hosts often have memory limits
- Consider optimizing your app for lower memory usage
- Some hosts offer increased limits for an additional fee

## Updating the Application

When you need to update your application:
1. Build and prepare a new version locally
2. Back up your live application and database
3. Upload the new files to your cPanel hosting
4. Run migrations if database schema has changed
5. Restart the Node.js application