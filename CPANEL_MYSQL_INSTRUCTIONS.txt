# cPanel Deployment Process with MySQL Database

## 1. Preparation for MySQL (Important Change)

Since your application was built with PostgreSQL but cPanel uses MySQL, we need to make some changes:

1. Install the MySQL connector package:
   ```bash
   npm install mysql2
   ```

2. Modify database schema and connections to work with MySQL instead of PostgreSQL
   - Update the schema.ts file to use MySQL syntax instead of PostgreSQL
   - Change connection parameters to use MySQL

## 2. Uploading to cPanel

### Method 1: Using File Manager
1. Log in to your cPanel account
2. Open "File Manager"
3. Navigate to the directory where you want to deploy (e.g., `public_html` or a subdirectory)
4. Click "Upload" and select all files from the `cpanel-deploy` directory
5. Wait for the upload to complete

### Method 2: Using FTP/SFTP (Recommended for Large Files)
1. Use an FTP client like FileZilla or Cyberduck
2. Connect to your cPanel hosting with the FTP credentials
3. Upload the entire `cpanel-deploy` directory content to your chosen directory on the server

## 3. MySQL Database Setup

1. In cPanel, navigate to "MySQL Databases"
2. Create a new database (e.g., `ipcr_db`)
3. Create a new database user with a strong password
4. Add the user to the database with all privileges
5. Note the database connection details:
   - Hostname (usually localhost)
   - Database name
   - Username
   - Password
   - Port (usually 3306 for MySQL)

## 4. Environment Configuration for MySQL

1. In cPanel File Manager, navigate to your deployed application
2. Edit the `.env` file with your MySQL database credentials:
   ```
   DATABASE_URL=mysql://your_db_user:your_password@localhost:3306/your_db_name
   ```
3. If you're using social media integrations, add your API keys for each service

## 5. MySQL Schema Migration

Create a schema migration script to set up your MySQL database:

1. Create a file named `mysql-schema.js` in your application directory:
   ```javascript
   // mysql-schema.js
   const mysql = require('mysql2/promise');
   require('dotenv').config();

   // MySQL connection string from .env
   const connectionString = process.env.DATABASE_URL;
   
   // Parse connection string
   const getConnectionConfig = (url) => {
     // Example: mysql://user:password@localhost:3306/dbname
     const matches = url.match(/mysql:\/\/([^:]+):([^@]+)@([^:]+):(\d+)\/(.+)/);
     if (!matches) throw new Error('Invalid MySQL connection string');
     
     return {
       host: matches[3],
       user: matches[1],
       password: matches[2],
       port: parseInt(matches[4]),
       database: matches[5],
       multipleStatements: true
     };
   };

   async function setupDatabase() {
     let connection;
     
     try {
       const config = getConnectionConfig(connectionString);
       connection = await mysql.createConnection(config);
       
       console.log('Connected to MySQL database');
       
       // Create tables
       await connection.execute(`
         -- Users table
         CREATE TABLE IF NOT EXISTS users (
           id INT AUTO_INCREMENT PRIMARY KEY,
           username VARCHAR(255) NOT NULL UNIQUE,
           password VARCHAR(255) NOT NULL,
           email VARCHAR(255),
           fullName VARCHAR(255),
           role VARCHAR(50) DEFAULT 'user',
           securityClearance INT DEFAULT 1,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
         );
         
         -- Data sources table
         CREATE TABLE IF NOT EXISTS data_sources (
           id INT AUTO_INCREMENT PRIMARY KEY,
           name VARCHAR(255) NOT NULL,
           type VARCHAR(50) NOT NULL,
           url VARCHAR(255),
           apiKey VARCHAR(255),
           active BOOLEAN DEFAULT true,
           description TEXT,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
         );
         
         -- Incidents table
         CREATE TABLE IF NOT EXISTS incidents (
           id INT AUTO_INCREMENT PRIMARY KEY,
           title VARCHAR(255) NOT NULL,
           description TEXT,
           location VARCHAR(255),
           region VARCHAR(255),
           coordinates TEXT,
           severity VARCHAR(50),
           status VARCHAR(50),
           category VARCHAR(50),
           reportedBy INT,
           verificationStatus VARCHAR(50),
           impactedPopulation INT,
           mediaUrls JSON,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (reportedBy) REFERENCES users(id) ON DELETE SET NULL
         );
         
         -- Alerts table
         CREATE TABLE IF NOT EXISTS alerts (
           id INT AUTO_INCREMENT PRIMARY KEY,
           title VARCHAR(255) NOT NULL,
           description TEXT,
           level VARCHAR(50),
           status VARCHAR(50),
           sourceCategory VARCHAR(50),
           region VARCHAR(255),
           affectedAreas JSON,
           issuedBy INT,
           expiresAt DATETIME,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (issuedBy) REFERENCES users(id) ON DELETE SET NULL
         );
         
         -- Risk indicators table
         CREATE TABLE IF NOT EXISTS risk_indicators (
           id INT AUTO_INCREMENT PRIMARY KEY,
           name VARCHAR(255) NOT NULL,
           description TEXT,
           category VARCHAR(50),
           value FLOAT,
           threshold FLOAT,
           region VARCHAR(255),
           dataSourceId INT,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (dataSourceId) REFERENCES data_sources(id) ON DELETE SET NULL
         );
         
         -- Risk analyses table
         CREATE TABLE IF NOT EXISTS risk_analyses (
           id INT AUTO_INCREMENT PRIMARY KEY,
           title VARCHAR(255) NOT NULL,
           description TEXT,
           region VARCHAR(255),
           riskLevel VARCHAR(50),
           factors JSON,
           recommendations TEXT,
           analyzedBy INT,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (analyzedBy) REFERENCES users(id) ON DELETE SET NULL
         );
         
         -- Response plans table
         CREATE TABLE IF NOT EXISTS response_plans (
           id INT AUTO_INCREMENT PRIMARY KEY,
           title VARCHAR(255) NOT NULL,
           description TEXT,
           region VARCHAR(255),
           steps JSON,
           resources JSON,
           status VARCHAR(50),
           createdBy INT,
           interAgencyPortal VARCHAR(255),
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (createdBy) REFERENCES users(id) ON DELETE SET NULL
         );
         
         -- Response activities table
         CREATE TABLE IF NOT EXISTS response_activities (
           id INT AUTO_INCREMENT PRIMARY KEY,
           title VARCHAR(255) NOT NULL,
           description TEXT,
           location VARCHAR(255),
           status VARCHAR(50),
           responsePlanId INT,
           assignedTeamId INT,
           startDate DATETIME,
           endDate DATETIME,
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
           FOREIGN KEY (responsePlanId) REFERENCES response_plans(id) ON DELETE SET NULL
         );
         
         -- Response teams table
         CREATE TABLE IF NOT EXISTS response_teams (
           id INT AUTO_INCREMENT PRIMARY KEY,
           name VARCHAR(255) NOT NULL,
           description TEXT,
           contactPerson VARCHAR(255),
           contactEmail VARCHAR(255),
           contactPhone VARCHAR(50),
           members JSON,
           specialization VARCHAR(255),
           createdAt DATETIME DEFAULT CURRENT_TIMESTAMP,
           updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
         );
         
         -- Add basic admin user
         INSERT INTO users (username, password, email, fullName, role, securityClearance)
         VALUES (
           'admin', 
           '9f27ac323fd6613f8ee96f5008a751b6a02e47b83eb8ba4700dd95b4630dbddb.4dbc581e0ad25430a8e20408b150850e', 
           'admin@example.com', 
           'System Administrator', 
           'admin', 
           7
         ) ON DUPLICATE KEY UPDATE id=id;
       `);
       
       console.log('Database schema created successfully');
       
     } catch (error) {
       console.error('Error setting up database:', error);
       throw error;
     } finally {
       if (connection) {
         await connection.end();
         console.log('Database connection closed');
       }
     }
   }

   // Run the setup
   setupDatabase()
     .then(() => {
       console.log('Database setup completed successfully');
       process.exit(0);
     })
     .catch(err => {
       console.error('Failed to set up database:', err);
       process.exit(1);
     });
   ```

2. Add this file to your deployment package

## 6. Modifying Database Connection in Your Application

Since the application was built for PostgreSQL, you need to modify the database connection code:

1. Create a file named `db-mysql.js` in your `server` directory:
   ```javascript
   // db-mysql.js
   const mysql = require('mysql2/promise');
   require('dotenv').config();

   // MySQL connection pool
   const pool = mysql.createPool({
     uri: process.env.DATABASE_URL,
     waitForConnections: true,
     connectionLimit: 10,
     queueLimit: 0
   });

   // Simple query function that mimics the PostgreSQL API
   async function query(sql, params) {
     const [rows] = await pool.execute(sql, params);
     return rows;
   }

   module.exports = {
     pool,
     query
   };
   ```

2. Replace imports of PostgreSQL database files with this new MySQL version

## 7. Installing Dependencies

1. Access your server via SSH (if available):
   ```bash
   ssh username@yourdomain.com
   ```
2. Navigate to your application directory:
   ```bash
   cd public_html/your-app-directory
   ```
3. Install production dependencies including MySQL:
   ```bash
   npm install mysql2 --save
   npm ci --omit=dev
   ```

## 8. Setting Up the Application

### Using cPanel's Application Manager
1. In cPanel, look for "Setup Node.js App" or similar
2. Click "Create Application"
3. Fill in the required fields:
   - Node.js version: 16.x or newer
   - Application mode: Production
   - Application root: Path to your application
   - Application URL: Your domain or subdomain
   - Application startup file: `start.cjs`
4. Click "Create" to set up the application

## 9. Running MySQL Schema Setup

1. After configuring the environment variables, run the MySQL schema script:
   ```bash
   node mysql-schema.js
   ```
   This will create all the necessary tables in your MySQL database.

2. Default admin credentials:
   - Username: admin
   - Password: admin123

## 10. Setting Up a Custom Domain (Optional)

If you want to use a custom domain or subdomain:
1. In cPanel, go to "Domains" or "Subdomains"
2. Add your domain/subdomain and point it to your application directory
3. Configure DNS settings if using a new domain

## 11. SSL Certificate (Recommended)

1. In cPanel, find "SSL/TLS" or "Let's Encrypt"
2. Generate and install a free SSL certificate for your domain
3. Enable HTTPS for secure connections

## 12. Troubleshooting MySQL-Specific Issues

### Connection Problems
- Check the format of your MySQL connection string: `mysql://user:password@host:port/database`
- Ensure the MySQL user has the correct permissions
- Some cPanel hosts restrict MySQL connections to certain IPs or domains

### Query Syntax Errors
- PostgreSQL and MySQL have different SQL syntax in some cases
- Watch for errors related to:
  - Date/time functions
  - JSON operations (MySQL has different JSON functions)
  - Text search functionality

### Performance Issues
- MySQL may require different indexing strategies than PostgreSQL
- Consider adding appropriate indexes to frequently queried columns

## 13. Regular Maintenance 

1. Set up MySQL backups:
   - In cPanel, go to "Backup Wizard" or "Backup"
   - Schedule regular database backups
2. Monitor MySQL database size:
   - Check "MySQL Databases" section for database usage
   - Optimize tables periodically using phpMyAdmin